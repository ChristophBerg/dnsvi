#!/usr/bin/perl

# Copyright (c) 2014 Christoph Berg <myon@debian.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use strict;
use warnings;
use File::Temp qw(tempfile);
use Getopt::Long;

## option parsing

sub usage {
	my $exit = shift;
	print "Usage: $0 [-k keyfile] [\@nameserver] <zone>\n";
	exit $exit;
}

my $keyfile = '';
my $nameserver = '';

Getopt::Long::config('bundling');
if (!GetOptions (
		'-h'              =>  sub { usage(0) },
		'--help'          =>  sub { usage(0) },
		'-k=s'            =>  \$keyfile,
		'--key-file=s'    =>  \$keyfile,
	)) {
	usage(1);
};

$keyfile = "-k $keyfile" if ($keyfile);

if (@ARGV > 0 and $ARGV[0] =~ /^(@.+)/) {
	$nameserver = $1;
	shift;
}
if (@ARGV != 1) {
	usage(1);
}
my $zone = shift;

## main

my ($fh, $filename) = tempfile( "$zone.XXXXXX", TMPDIR => 1, UNLINK => 1 );
my %data;
my ($rrsigs, $nsecs) = (0, 0);

open F, "dig $nameserver -t axfr $zone |";
while (my $line = <F>) {
	chomp $line;
	# dirac.df7cb.de. 7200 IN CNAME dirac.dyn.df7cb.de.
	my ($name, $ttl, $class, $type, $data) = split /\s+/, $line, 5;
	if ($line =~ /^;/ or not defined $data) { # non-RR lines
		print $fh "$line\n";
		next;
	}
	if ($type eq 'RRSIG') {
		$rrsigs++;
		next;
	} elsif ($type eq 'NSEC') {
		$nsecs++;
		next;
	}
	if ($name eq "$zone.") {
		$name = '@';
		$line =~ s/^\Q$zone\E\.\t/@\t/;
	} else {
		$name =~ s/\.\Q$zone\E\.$//;
		$line =~ s/\.\Q$zone\E\.\t/\t/;
	}
	print $fh "$line\n";
	$data{$name}->{$class}->{$type}->{$data}->{1} = $ttl;
}
print $fh ";; Records omitted: $rrsigs RRSIG, $nsecs NSEC\n";
close $fh;
close F;

my $mtime = (stat $filename)[9];
$ENV{EDITOR} ||= 'vi';
system "$ENV{EDITOR} $filename";

if ((stat $filename)[9] == $mtime) {
	print "No change.\n";
	exit 0;
}

my %rr2;
open F, $filename or die "$filename: $!";
while (my $line = <F>) {
	chomp $line;
	my ($name, $ttl, $class, $type, $data) = split /\s+/, $line, 5;
	if ($line =~ /^;/ or not defined $data) { # non-RR lines
		next;
	}
	$data{$name}->{$class}->{$type}->{$data}->{2} = $ttl;
}
close F;

my @cmds;
foreach my $name (sort keys %data) {
	my $fqdn = $name;
	$fqdn .= ".$zone." unless ($fqdn =~ /\.$/);
	foreach my $class (sort keys %{$data{$name}}) {
		foreach my $type (sort keys %{$data{$name}->{$class}}) {
			my $rrset = $data{$name}->{$class}->{$type};
			foreach my $data (sort keys %$rrset) {
				my $rr = $rrset->{$data};
				if (exists $rr->{1} and exists $rr->{2} and $rr->{1} == $rr->{2}) {
					# nothing to do
					next;
				}
				if (exists $rr->{1}) { # removed (or changed)
					push @cmds, "update delete $fqdn $class $type $data\n";
				}
				if (exists $rr->{2}) { # added (or changed)
					push @cmds, "update add    $fqdn $rr->{2} $class $type $data\n";
				}
			}
		}
	}
}

unless (@cmds) {
	print "No change.\n";
	exit 0;
}
#unshift @cmds, "zone $zone.\n";
push @cmds, "send\nanswer\n\n";

print @cmds;
print "Send? [y] ";
my $response = <STDIN>;
if ($response =~ /^(y|$)/) {
	open F, "| nsupdate $keyfile";
	print F $_ foreach (@cmds);
	close F;
}
